<?xml version="1.0" encoding="UTF-8" ?>
<class name="NDArray" inherits="RefCounted" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/godotengine/godot/master/doc/class.xsd">
	<brief_description>
		A NumDot tensor object.
	</brief_description>
	<description>
		A NumDot tensor object.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="array_size_in_bytes" qualifiers="const">
			<return type="int" />
			<description>
				Returns the number of bytes used by the contiguous data block of this array.
				This is equivalent to nd.size_of_dtype_in_bytes(x.dtype()) * x.size().
			</description>
		</method>
		<method name="as_type" qualifiers="const">
			<return type="Variant" />
			<param index="0" name="type" type="int" enum="nd.DType" />
			<description>
				Convert to an array of the given type, but avoid copying data if possible.
			</description>
		</method>
		<method name="assign_abs" qualifiers="const">
			<return type="void" />
			<param index="0" name="a" type="Variant" />
			<description>
				In-place version of nd.abs.
				Assigns the result to this array. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_acos" qualifiers="const">
			<return type="void" />
			<param index="0" name="a" type="Variant" />
			<description>
				In-place version of nd.acos.
				Assigns the result to this array. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_acosh" qualifiers="const">
			<return type="void" />
			<param index="0" name="a" type="Variant" />
			<description>
				In-place version of nd.acosh.
				Assigns the result to this array. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_add" qualifiers="const">
			<return type="void" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				In-place version of nd.add.
				Assigns the result to this array. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_asin" qualifiers="const">
			<return type="void" />
			<param index="0" name="a" type="Variant" />
			<description>
				In-place version of nd.asin.
				Assigns the result to this array. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_asinh" qualifiers="const">
			<return type="void" />
			<param index="0" name="a" type="Variant" />
			<description>
				In-place version of nd.asinh.
				Assigns the result to this array. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_atan" qualifiers="const">
			<return type="void" />
			<param index="0" name="a" type="Variant" />
			<description>
				In-place version of nd.atan.
				Assigns the result to this array. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_atan2" qualifiers="const">
			<return type="void" />
			<param index="0" name="x1" type="Variant" />
			<param index="1" name="x2" type="Variant" />
			<description>
				In-place version of nd.atan2.
				Assigns the result to this array. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_atanh" qualifiers="const">
			<return type="void" />
			<param index="0" name="a" type="Variant" />
			<description>
				In-place version of nd.atanh.
				Assigns the result to this array. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_ceil" qualifiers="const">
			<return type="void" />
			<param index="0" name="a" type="Variant" />
			<description>
				In-place version of nd.ceil.
				Assigns the result to this array. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_cos" qualifiers="const">
			<return type="void" />
			<param index="0" name="a" type="Variant" />
			<description>
				In-place version of nd.cos.
				Assigns the result to this array. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_cosh" qualifiers="const">
			<return type="void" />
			<param index="0" name="a" type="Variant" />
			<description>
				In-place version of nd.cosh.
				Assigns the result to this array. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_deg2rad" qualifiers="const">
			<return type="void" />
			<param index="0" name="a" type="Variant" />
			<description>
				In-place version of nd.deg2rad.
				Assigns the result to this array. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_divide" qualifiers="const">
			<return type="void" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				In-place version of nd.divide.
				Assigns the result to this array. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_equal" qualifiers="const">
			<return type="void" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				In-place version of nd.equal.
				Assigns the result to this array. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_exp" qualifiers="const">
			<return type="void" />
			<param index="0" name="a" type="Variant" />
			<description>
				In-place version of nd.exp.
				Assigns the result to this array. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_floor" qualifiers="const">
			<return type="void" />
			<param index="0" name="a" type="Variant" />
			<description>
				In-place version of nd.floor.
				Assigns the result to this array. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_greater" qualifiers="const">
			<return type="void" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				In-place version of nd.greater.
				Assigns the result to this array. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_greater_equal" qualifiers="const">
			<return type="void" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				In-place version of nd.greater_equal.
				Assigns the result to this array. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_less" qualifiers="const">
			<return type="void" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				In-place version of nd.less.
				Assigns the result to this array. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_less_equal" qualifiers="const">
			<return type="void" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				In-place version of nd.less_equal.
				Assigns the result to this array. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_log" qualifiers="const">
			<return type="void" />
			<param index="0" name="a" type="Variant" />
			<description>
				In-place version of nd.log.
				Assigns the result to this array. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_logical_and" qualifiers="const">
			<return type="void" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				In-place version of nd.logical_and.
				Assigns the result to this array. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_logical_not" qualifiers="const">
			<return type="void" />
			<param index="0" name="a" type="Variant" />
			<description>
				In-place version of nd.logical_not.
				Assigns the result to this array. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_logical_or" qualifiers="const">
			<return type="void" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				In-place version of nd.logical_or.
				Assigns the result to this array. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_max" qualifiers="const">
			<return type="void" />
			<param index="0" name="a" type="Variant" default="null" />
			<param index="1" name="axes" type="Variant" default="null" />
			<description>
				In-place version of nd.max.
				Assigns the result to this array. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_maximum" qualifiers="const">
			<return type="void" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				In-place version of nd.maximum.
				Assigns the result to this array. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_mean" qualifiers="const">
			<return type="void" />
			<param index="0" name="a" type="Variant" default="null" />
			<param index="1" name="axes" type="Variant" default="null" />
			<description>
				In-place version of nd.mean.
				Assigns the result to this array. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_min" qualifiers="const">
			<return type="void" />
			<param index="0" name="a" type="Variant" default="null" />
			<param index="1" name="axes" type="Variant" default="null" />
			<description>
				In-place version of nd.min.
				Assigns the result to this array. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_minimum" qualifiers="const">
			<return type="void" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				In-place version of nd.minimum.
				Assigns the result to this array. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_multiply" qualifiers="const">
			<return type="void" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				In-place version of nd.multiply.
				Assigns the result to this array. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_norm" qualifiers="const">
			<return type="void" />
			<param index="0" name="a" type="Variant" default="null" />
			<param index="1" name="ord" type="Variant" default="2" />
			<param index="2" name="axes" type="Variant" default="null" />
			<description>
				In-place version of nd.norm.
				Assigns the result to this array. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_not_equal" qualifiers="const">
			<return type="void" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				In-place version of nd.not_equal.
				Assigns the result to this array. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_pow" qualifiers="const">
			<return type="void" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				In-place version of nd.pow.
				Assigns the result to this array. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_prod" qualifiers="const">
			<return type="void" />
			<param index="0" name="a" type="Variant" default="null" />
			<param index="1" name="axes" type="Variant" default="null" />
			<description>
				In-place version of nd.prod.
				Assigns the result to this array. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_rad2deg" qualifiers="const">
			<return type="void" />
			<param index="0" name="a" type="Variant" />
			<description>
				In-place version of nd.rad2deg.
				Assigns the result to this array. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_remainder" qualifiers="const">
			<return type="void" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				In-place version of nd.remainder.
				Assigns the result to this array. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_rint" qualifiers="const">
			<return type="void" />
			<param index="0" name="a" type="Variant" />
			<description>
				In-place version of nd.rint.
				Assigns the result to this array. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_round" qualifiers="const">
			<return type="void" />
			<param index="0" name="a" type="Variant" />
			<description>
				In-place version of nd.round.
				Assigns the result to this array. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_sign" qualifiers="const">
			<return type="void" />
			<param index="0" name="a" type="Variant" />
			<description>
				In-place version of nd.sign.
				Assigns the result to this array. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_sin" qualifiers="const">
			<return type="void" />
			<param index="0" name="a" type="Variant" />
			<description>
				In-place version of nd.sin.
				Assigns the result to this array. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_sinh" qualifiers="const">
			<return type="void" />
			<param index="0" name="a" type="Variant" />
			<description>
				In-place version of nd.sinh.
				Assigns the result to this array. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_sqrt" qualifiers="const">
			<return type="void" />
			<param index="0" name="a" type="Variant" />
			<description>
				In-place version of nd.sqrt.
				Assigns the result to this array. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_std" qualifiers="const">
			<return type="void" />
			<param index="0" name="a" type="Variant" default="null" />
			<param index="1" name="axes" type="Variant" default="null" />
			<description>
				In-place version of nd.std.
				Assigns the result to this array. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_subtract" qualifiers="const">
			<return type="void" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				In-place version of nd.subtract.
				Assigns the result to this array. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_sum" qualifiers="const">
			<return type="void" />
			<param index="0" name="a" type="Variant" default="null" />
			<param index="1" name="axes" type="Variant" default="null" />
			<description>
				In-place version of nd.sum.
				Assigns the result to this array. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_tan" qualifiers="const">
			<return type="void" />
			<param index="0" name="a" type="Variant" />
			<description>
				In-place version of nd.tan.
				Assigns the result to this array. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_tanh" qualifiers="const">
			<return type="void" />
			<param index="0" name="a" type="Variant" />
			<description>
				In-place version of nd.tanh.
				Assigns the result to this array. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_trunc" qualifiers="const">
			<return type="void" />
			<param index="0" name="a" type="Variant" />
			<description>
				In-place version of nd.trunc.
				Assigns the result to this array. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="assign_var" qualifiers="const">
			<return type="void" />
			<param index="0" name="a" type="Variant" default="null" />
			<param index="1" name="axes" type="Variant" default="null" />
			<description>
				In-place version of nd.var.
				Assigns the result to this array. The shape of the result must be broadcastable to this array's shape.
			</description>
		</method>
		<method name="dtype" qualifiers="const">
			<return type="int" enum="nd.DType" />
			<description>
				Data-type of the array’s elements.
			</description>
		</method>
		<method name="get" qualifiers="const vararg">
			<return type="NDArray" />
			<description>
				Indexes into the array, and return the resulting tensor.
			</description>
		</method>
		<method name="get_float" qualifiers="const vararg">
			<return type="float" />
			<description>
				Indexes into the array, and return the resulting value as float.
				Errors if the index does not yield a single value.
			</description>
		</method>
		<method name="get_int" qualifiers="const vararg">
			<return type="int" />
			<description>
				Indexes into the array, and return the resulting value as int.
				Errors if the index does not yield a single value.
			</description>
		</method>
		<method name="ndim" qualifiers="const">
			<return type="int" />
			<description>
				Number of array dimensions.
			</description>
		</method>
		<method name="set" qualifiers="const vararg">
			<return type="void" />
			<description>
				Indexes into the array, sets the element to the given value.
				The value's dimensions must match this array's last dimensions.
			</description>
		</method>
		<method name="shape" qualifiers="const">
			<return type="PackedInt64Array" />
			<description>
				Array of array dimensions.
			</description>
		</method>
		<method name="size" qualifiers="const">
			<return type="int" />
			<description>
				Number of elements in the array. Equal to nd.prod(a.shape()), i.e., the product of the array’s dimensions.
			</description>
		</method>
		<method name="to_float" qualifiers="const">
			<return type="float" />
			<description>
				Convert this tensor to a single float.
				Errors if size() is not 1.
			</description>
		</method>
		<method name="to_godot_array" qualifiers="const">
			<return type="Array" />
			<description>
				Convert this tensor to a Godot array. For now, the resulting array is flat.
			</description>
		</method>
		<method name="to_int" qualifiers="const">
			<return type="int" />
			<description>
				Convert this tensor to a single int.
				Errors if size() is not 1.
			</description>
		</method>
		<method name="to_packed_byte_array" qualifiers="const">
			<return type="PackedByteArray" />
			<description>
				Convert a flat version of this tensor to a PackedByteArray.
			</description>
		</method>
		<method name="to_packed_float32_array" qualifiers="const">
			<return type="PackedFloat32Array" />
			<description>
				Convert a flat version of this tensor to a PackedFloat32Array.
			</description>
		</method>
		<method name="to_packed_float64_array" qualifiers="const">
			<return type="PackedFloat64Array" />
			<description>
				Convert a flat version of this tensor to a PackedFloat64Array.
			</description>
		</method>
		<method name="to_packed_int32_array" qualifiers="const">
			<return type="PackedInt32Array" />
			<description>
				Convert a flat version of this tensor to a PackedInt32Array.
			</description>
		</method>
		<method name="to_packed_int64_array" qualifiers="const">
			<return type="PackedInt64Array" />
			<description>
				Convert a flat version of this tensor to a PackedInt64Array.
			</description>
		</method>
	</methods>
</class>
