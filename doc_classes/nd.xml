<?xml version="1.0" encoding="UTF-8" ?>
<class name="nd" inherits="Object" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/godotengine/godot/master/doc/class.xsd">
	<brief_description>
		Contains NumDot functions.
	</brief_description>
	<description>
		The base namespace for NumDot functions.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="abs" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				Calculate the absolute value element-wise.
			</description>
		</method>
		<method name="acos" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				Trigonometric inverse cosine, element-wise.
				The inverse of cos so that, if y = cos(x), then x = arccos(y).
			</description>
		</method>
		<method name="acosh" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				Inverse hyperbolic cosine, element-wise.
			</description>
		</method>
		<method name="add" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				Add arguments element-wise.
			</description>
		</method>
		<method name="arange" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="start_or_stop" type="Variant" default="0" />
			<param index="1" name="stop" type="Variant" default="null" />
			<param index="2" name="step" type="Variant" default="1" />
			<param index="3" name="dtype" type="int" enum="nd.DType" default="11" />
			<description>
				Return evenly spaced values within a given interval.
			</description>
		</method>
		<method name="array" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="array" type="Variant" default="null" />
			<param index="1" name="dtype" type="int" enum="nd.DType" default="11" />
			<description>
				Copy existing data to a new array.
			</description>
		</method>
		<method name="as_array" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="array" type="Variant" default="null" />
			<param index="1" name="dtype" type="int" enum="nd.DType" default="11" />
			<description>
				Convert the input to an array, but avoid copying data if possible.
			</description>
		</method>
		<method name="asin" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				Inverse sine, element-wise.
				The inverse of sine, so that if y = sin(x) then x = arcsin(y).
			</description>
		</method>
		<method name="asinh" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				Inverse hyperbolic sine element-wise.
			</description>
		</method>
		<method name="atan" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				Trigonometric inverse tangent, element-wise.
				The inverse of tan, so that if y = tan(x) then x = arctan(y).
			</description>
		</method>
		<method name="atan2" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="x1" type="Variant" />
			<param index="1" name="x2" type="Variant" />
			<description>
				Element-wise arc tangent of x1/x2 choosing the quadrant correctly.
				The quadrant (i.e., branch) is chosen so that arctan2(x1, x2) is the signed angle in radians between the ray ending at the origin and passing through the point (1,0), and the ray ending at the origin and passing through the point (x2, x1). (Note the role reversal: the “y-coordinate” is the first function parameter, the “x-coordinate” is the second.) By IEEE convention, this function is defined for x2 = +/-0 and for either or both of x1 and x2 = +/-inf.
			</description>
		</method>
		<method name="atanh" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				Inverse hyperbolic tangent element-wise.
			</description>
		</method>
		<method name="ceil" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				Return the ceiling of the input, element-wise.
				The ceil of the scalar x is the smallest integer i, such that i &gt;= x.
			</description>
		</method>
		<method name="cos" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				Cosine element-wise.
			</description>
		</method>
		<method name="cosh" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				Hyperbolic cosine, element-wise.
				Equivalent to 0.5 * (nd.exp(x) + nd.exp(-x)).
			</description>
		</method>
		<method name="deg2rad" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				Convert angles from degrees to radians.
			</description>
		</method>
		<method name="divide" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				Divide arguments element-wise.
			</description>
		</method>
		<method name="ellipsis" qualifiers="static">
			<return type="StringName" />
			<description>
				An alias for the StringName &amp;"...". In a subscript, this will stand in for omitted dimensions, for example if you want to index the last dimension.
			</description>
		</method>
		<method name="empty" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="shape" type="Variant" default="null" />
			<param index="1" name="dtype" type="int" enum="nd.DType" default="2" />
			<description>
				Return a new array of given shape and type, without initializing entries.
			</description>
		</method>
		<method name="equal" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				Return (x1 == x2) element-wise.
			</description>
		</method>
		<method name="exp" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				Calculate the exponential of all elements in the input array.
			</description>
		</method>
		<method name="flip" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="v" type="Variant" />
			<param index="1" name="axis" type="int" />
			<description>
				Reverse the order of elements in an array along the given axis.
				The shape of the array is preserved, but the elements are reordered.
			</description>
		</method>
		<method name="floor" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				Return the floor of the input, element-wise.
				The floor of the scalar x is the largest integer i, such that i &lt;= x.
			</description>
		</method>
		<method name="from" qualifiers="static">
			<return type="NDRange" />
			<param index="0" name="start" type="int" />
			<description>
				Create a range that starts at the given index.
			</description>
		</method>
		<method name="full" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="shape" type="Variant" default="null" />
			<param index="1" name="fill_value" type="Variant" default="null" />
			<param index="2" name="dtype" type="int" enum="nd.DType" default="2" />
			<description>
				Return a new array of given shape and type, filled with fill_value.
			</description>
		</method>
		<method name="greater" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				Return (x1 &gt; x2) element-wise.
			</description>
		</method>
		<method name="greater_equal" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				Return (x1 &gt;= x2) element-wise.
			</description>
		</method>
		<method name="less" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				Return (x1 &lt; x2) element-wise.
			</description>
		</method>
		<method name="less_equal" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				Return (x1 &lt;= x2) element-wise.
			</description>
		</method>
		<method name="linspace" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="start" type="Variant" default="0" />
			<param index="1" name="stop" type="Variant" default="null" />
			<param index="2" name="num" type="int" default="50" />
			<param index="3" name="endpoint" type="bool" default="true" />
			<param index="4" name="dtype" type="int" enum="nd.DType" default="11" />
			<description>
				Return evenly spaced numbers over a specified interval.
				Returns num evenly spaced samples, calculated over the interval [start, stop].
				The endpoint of the interval can optionally be excluded.
			</description>
		</method>
		<method name="log" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				Natural logarithm, element-wise.
				The natural logarithm log is the inverse of the exponential function, so that log(exp(x)) = x. The natural logarithm is logarithm in base e.
			</description>
		</method>
		<method name="logical_and" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				Compute the truth value of x1 AND x2 element-wise.
			</description>
		</method>
		<method name="logical_not" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				Compute the truth value of NOT x element-wise.
			</description>
		</method>
		<method name="logical_or" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				Compute the truth value of x1 OR x2 element-wise.
			</description>
		</method>
		<method name="max" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" default="null" />
			<param index="1" name="axes" type="Variant" default="null" />
			<description>
				Return the maximum of an array or maximum along an axis.
			</description>
		</method>
		<method name="maximum" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				Element-wise maximum of array elements.
				Compare two arrays and return a new array containing the element-wise maxima. If one of the elements being compared is a NaN, then that element is returned. If both elements are NaNs then the first is returned. The latter distinction is important for complex NaNs, which are defined as at least one of the real or imaginary parts being a NaN. The net effect is that NaNs are propagated.
			</description>
		</method>
		<method name="mean" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" default="null" />
			<param index="1" name="axes" type="Variant" default="null" />
			<description>
				Compute the arithmetic mean along the specified axis.
				Returns the average of the array elements. The average is taken over the flattened array by default, otherwise over the specified axis.
			</description>
		</method>
		<method name="min" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" default="null" />
			<param index="1" name="axes" type="Variant" default="null" />
			<description>
				Return the minimum of an array or minimum along an axis.
			</description>
		</method>
		<method name="minimum" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				Element-wise minimum of array elements.
				                Compare two arrays and return a new array containing the element-wise minima. If one of the elements being compared is a NaN, then that element is returned. If both elements are NaNs then the first is returned. The latter distinction is important for complex NaNs, which are defined as at least one of the real or imaginary parts being a NaN. The net effect is that NaNs are propagated.
			</description>
		</method>
		<method name="moveaxis" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="v" type="Variant" />
			<param index="1" name="src" type="int" />
			<param index="2" name="dst" type="int" />
			<description>
				Move axes of an array to new positions.
				Other axes remain in their original order.
			</description>
		</method>
		<method name="multiply" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				Multiply arguments element-wise.
			</description>
		</method>
		<method name="newaxis" qualifiers="static">
			<return type="StringName" />
			<description>
				An alias for the StringName &amp;"newaxis". In a subscript, this will add a dimension of size one.
			</description>
		</method>
		<method name="norm" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" default="null" />
			<param index="1" name="ord" type="Variant" default="2" />
			<param index="2" name="axes" type="Variant" default="null" />
			<description>
				Vector norm.
				This function is able to return one of 4 different vector norms, depending on the value of the ord parameter (L0, L1, L2 and LInf).
			</description>
		</method>
		<method name="not_equal" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				Return (x1 != x2) element-wise.
			</description>
		</method>
		<method name="ones" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="shape" type="Variant" default="null" />
			<param index="1" name="dtype" type="int" enum="nd.DType" default="2" />
			<description>
				Return a new array of given shape and type, filled with ones.
			</description>
		</method>
		<method name="pow" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				First array elements raised to powers from second array, element-wise.
			</description>
		</method>
		<method name="prod" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" default="null" />
			<param index="1" name="axes" type="Variant" default="null" />
			<description>
				Return the product of array elements over a given axis.
			</description>
		</method>
		<method name="rad2deg" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				Convert angles from radians to degrees.
			</description>
		</method>
		<method name="range" qualifiers="static">
			<return type="NDRange" />
			<param index="0" name="start_or_stop" type="Variant" default="0" />
			<param index="1" name="stop" type="Variant" default="null" />
			<param index="2" name="step" type="Variant" default="null" />
			<description>
				Create a range. arange can be called with a varying number of positional arguments:
				arange(stop): Values are generated within the half-open interval [0, stop) (in other words, the interval including start but excluding stop).
				arange(start, stop): Values are generated within the half-open interval [start, stop).
				arange(start, stop, step) Values are generated within the half-open interval [start, stop), with spacing between values given by step.
			</description>
		</method>
		<method name="remainder" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				Returns the element-wise remainder of division.
				Computes the remainder complementary to the floor_divide function. It is equivalent to the modulus operator x1 % x2 and has the same sign as the divisor x2.
			</description>
		</method>
		<method name="reshape" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="shape" type="Variant" />
			<description>
				Gives a new shape to an array without changing its data.
				Up to one element in the new shape can be -1 to infer its size.
			</description>
		</method>
		<method name="rint" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				Round elements of the array to the nearest integer.
			</description>
		</method>
		<method name="round" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				Round elements of the array to the nearest integer.
			</description>
		</method>
		<method name="sign" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				Returns an element-wise indication of the sign of a number.
				The sign function returns -1 if x &lt; 0, 0 if x==0, 1 if x &gt; 0. nan is returned for nan inputs.
			</description>
		</method>
		<method name="sin" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				Trigonometric sine, element-wise.
			</description>
		</method>
		<method name="sinh" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				Hyperbolic sine, element-wise.
				Equivalent to 0.5 * (nd.exp(x) - nd.exp(-x)).
			</description>
		</method>
		<method name="size_of_dtype_in_bytes" qualifiers="static">
			<return type="int" />
			<param index="0" name="dtype" type="int" enum="nd.DType" />
			<description>
				Size of a single element of an array using the dtype.
			</description>
		</method>
		<method name="sqrt" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				Return the non-negative square-root of an array, element-wise.
			</description>
		</method>
		<method name="std" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" default="null" />
			<param index="1" name="axes" type="Variant" default="null" />
			<description>
				Compute the standard deviation along the specified axis.
				Returns the standard deviation, a measure of the spread of a distribution, of the array elements. The standard deviation is computed for the flattened array by default, otherwise over the specified axis.
			</description>
		</method>
		<method name="subtract" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="b" type="Variant" />
			<description>
				Subtract arguments, element-wise.
			</description>
		</method>
		<method name="sum" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" default="null" />
			<param index="1" name="axes" type="Variant" default="null" />
			<description>
				Sum of array elements over a given axis.
			</description>
		</method>
		<method name="swapaxes" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="v" type="Variant" />
			<param index="1" name="a" type="int" />
			<param index="2" name="b" type="int" />
			<description>
				Interchange two axes of an array.
			</description>
		</method>
		<method name="tan" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				Compute tangent element-wise.
				Equivalent to nd.sin(x) / nd.cos(x) element-wise.
			</description>
		</method>
		<method name="tanh" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				Compute hyperbolic tangent element-wise.
				Equivalent to nd.sinh(x) / nd.cosh(x).
			</description>
		</method>
		<method name="to" qualifiers="static">
			<return type="NDRange" />
			<param index="0" name="stop" type="int" />
			<description>
				Create a range that starts at 0, and stops at the given index (exclusive).
			</description>
		</method>
		<method name="transpose" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<param index="1" name="permutation" type="Variant" />
			<description>
				Returns an array with axes transposed.
			</description>
		</method>
		<method name="trunc" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" />
			<description>
				Return the truncated value of the input, element-wise.
				The truncated value of the scalar x is the nearest integer i which is closer to zero than x is. In short, the fractional part of the signed number x is discarded.
			</description>
		</method>
		<method name="var" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="a" type="Variant" default="null" />
			<param index="1" name="axes" type="Variant" default="null" />
			<description>
				Compute the variance along the specified axis.
				Returns the variance of the array elements, a measure of the spread of a distribution. The variance is computed for the flattened array by default, otherwise over the specified axis.
			</description>
		</method>
		<method name="zeros" qualifiers="static">
			<return type="NDArray" />
			<param index="0" name="shape" type="Variant" default="null" />
			<param index="1" name="dtype" type="int" enum="nd.DType" default="2" />
			<description>
				Return a new array of given shape and type, filled with zeros.
			</description>
		</method>
	</methods>
	<constants>
		<constant name="Bool" value="0" enum="DType">
			Boolean type (true or false), stored as a byte.
		</constant>
		<constant name="Float32" value="1" enum="DType">
			Single-precision (32 bit) floating-point number type.
		</constant>
		<constant name="Float64" value="2" enum="DType">
			Double-precision (64 bit) floating-point number type.
		</constant>
		<constant name="Int8" value="3" enum="DType">
			Signed integer type with 8 bits.
		</constant>
		<constant name="Int16" value="4" enum="DType">
			Signed integer type with 16 bits.
		</constant>
		<constant name="Int32" value="5" enum="DType">
			Signed integer type with 32 bits.
		</constant>
		<constant name="Int64" value="6" enum="DType">
			Signed integer type with 64 bits.
		</constant>
		<constant name="UInt8" value="7" enum="DType">
			Unsigned integer type with 8 bits. This dtype cannot express negative values.
		</constant>
		<constant name="UInt16" value="8" enum="DType">
			Unsigned integer type with 16 bits. This dtype cannot express negative values.
		</constant>
		<constant name="UInt32" value="9" enum="DType">
			Unsigned integer type with 32 bits. This dtype cannot express negative values.
		</constant>
		<constant name="UInt64" value="10" enum="DType">
			Unsigned integer type with 64 bits. This dtype cannot express negative values.
		</constant>
	</constants>
</class>
