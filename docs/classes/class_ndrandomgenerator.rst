:github_url: hide

.. DO NOT EDIT THIS FILE!!!
.. Generated automatically from Godot engine sources.
.. Generator: https://github.com/godotengine/godot/tree/master/doc/tools/make_rst.py.
.. XML source: https://github.com/godotengine/godot/tree/master/godot/NumDot/doc_classes/NDRandomGenerator.xml.

.. _class_NDRandomGenerator:

NDRandomGenerator
=================

**Inherits:** ``RefCounted``

An object for generating random values.

.. rst-class:: classref-introduction-group

Description
-----------

An object for generating random values. Given a specific seed, it is perfectly deterministic.

Create instances through :ref:`nd.default_rng<class_nd_method_default_rng>`.

.. rst-class:: classref-reftable-group

Methods
-------

.. table::
   :widths: auto

   +--------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                                                  | :ref:`integers<class_NDRandomGenerator_method_integers>`\ (\ low_or_high\: ``int`` = 0, high\: ``Variant`` = null, shape\: ``Variant`` = PackedByteArray(), dtype\: :ref:`DType<enum_nd_DType>` = 6, endpoint\: ``bool`` = false\ ) |
   +--------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                                                  | :ref:`randn<class_NDRandomGenerator_method_randn>`\ (\ shape\: ``Variant`` = PackedByteArray(), dtype\: :ref:`DType<enum_nd_DType>` = 2\ )                                                                                          |
   +--------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`NDArray<class_NDArray>`                                                  | :ref:`random<class_NDRandomGenerator_method_random>`\ (\ shape\: ``Variant`` = PackedByteArray(), dtype\: :ref:`DType<enum_nd_DType>` = 2\ )                                                                                        |
   +--------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
   | :ref:`Array<class_Array>`\[:ref:`NDRandomGenerator<class_NDRandomGenerator>`\] | :ref:`spawn<class_NDRandomGenerator_method_spawn>`\ (\ n\: ``int``\ )                                                                                                                                                               |
   +--------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+

.. rst-class:: classref-section-separator

----

.. rst-class:: classref-descriptions-group

Method Descriptions
-------------------

.. _class_NDRandomGenerator_method_integers:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **integers**\ (\ low_or_high\: ``int`` = 0, high\: ``Variant`` = null, shape\: ``Variant`` = PackedByteArray(), dtype\: :ref:`DType<enum_nd_DType>` = 6, endpoint\: ``bool`` = false\ ) :ref:`üîó<class_NDRandomGenerator_method_integers>`

Return random integers sampled from the ‚Äúdiscrete uniform‚Äù distribution of the specified dtype. If high is None (the default), then results are from 0 to low.

.. rst-class:: classref-item-separator

----

.. _class_NDRandomGenerator_method_randn:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **randn**\ (\ shape\: ``Variant`` = PackedByteArray(), dtype\: :ref:`DType<enum_nd_DType>` = 2\ ) :ref:`üîó<class_NDRandomGenerator_method_randn>`

Return random integers sampled from the standard normal distribution `N(0, 1)` of the specified dtype. A general gaussian distribution `N(mu, sig)` may be obtained by multiplying the result with `sig` and adding it with `mu`.

.. rst-class:: classref-item-separator

----

.. _class_NDRandomGenerator_method_random:

.. rst-class:: classref-method

:ref:`NDArray<class_NDArray>` **random**\ (\ shape\: ``Variant`` = PackedByteArray(), dtype\: :ref:`DType<enum_nd_DType>` = 2\ ) :ref:`üîó<class_NDRandomGenerator_method_random>`

Return random floats in the half-open interval \[0.0, 1.0).

.. rst-class:: classref-item-separator

----

.. _class_NDRandomGenerator_method_spawn:

.. rst-class:: classref-method

:ref:`Array<class_Array>`\[:ref:`NDRandomGenerator<class_NDRandomGenerator>`\] **spawn**\ (\ n\: ``int``\ ) :ref:`üîó<class_NDRandomGenerator_method_spawn>`

Create new independent child generators.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
.. |bitfield| replace:: :abbr:`BitField (This value is an integer composed as a bitmask of the following flags.)`
.. |void| replace:: :abbr:`void (No return value.)`
